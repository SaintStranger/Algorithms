#include <stdio.h>
#include <stdlib.h>



//Количество маршрутов с препятствиями. Реализовать чтение массива с препятствием и нахождение количество маршрутов.

int main()
{
    int N = 0, M = 0;
    
    printf("Input parameters for NxM road matrix\n");
    printf("format N-M, like 3-3 : \n");
    scanf("%d-%d", &N, &M);
    
    printf("1 - we can move\n");
    printf("0 - we cannot move\n");
    printf("\n");
    
    int roadBoard[N][M];
    int value, i, j;
    
    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++) {
            printf("Input value 1 or 0 for [%d]x[%d] : \n", i, j);
            scanf("%d", &value);
            if ((value > 1) || (value < 0))
                roadBoard[i][j] = 1;
            else
                roadBoard[i][j] = value;
        }
    }
    
    printf("\n");
    printf("Entered values : \n");
    
    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++)
            printf("%d  ", roadBoard[i][j]);
        printf("\n");
    }
    
    roadBoard[0][0] = 1;
    
    for (i = 1; i < N - 1; i ++) {
        if (roadBoard[i][0] == 0)
            roadBoard[i+1][0] = 0;
    }
    for (j = 1; j < M - 1; j ++) {
        if (roadBoard[0][j] == 0)
            roadBoard[0][j+1] = 0;
    }
    
    printf("\n");
    printf("Road matrix : \n");
    
    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++)
            printf("%d  ", roadBoard[i][j]);
        printf("\n");
    }
    
    printf("\n");
    
    for (i = 1; i < N; i++) {
        for (j = 1; j < M; j++)
            if (roadBoard[i][j] != 0)
                roadBoard[i][j] = roadBoard[i][j-1] + roadBoard[i-1][j];
    }
    
    
    printf("\n");
    printf("Leap count matrix : \n");
    
    for (i = 0; i < N; i++) {
        for (j = 0; j < M; j++)
            printf("%d     ", roadBoard[i][j]);
        printf("\n");
        printf("\n");
    }
    
    printf("\n");
    printf("\n");
    
    return 0;
    
}



//Решить задачу о нахождении длины максимальной последовательности с помощью матрицы.

int main()
{
    char str1[14] = "ABCDFASDASDASD";
    char str2[16] = "ABCEFASDASeASSDA";
    printf("%d", lcsLength(str1, str2));
    return 0;
}
 
int lcsLength(char * A, char * B)
 
{
    /*int aLen = strlen(A) + 1;
    printf("%d", aLen);
    int bLen = strlen(B) + 1;
    printf("%d", bLen);*/
    int i,j;
    int L[15][17] = {0}; // Длины строк + 1, чтобы заполнить нулями
 
    for (i = 14; i >= 0; i--)
    
    {
        for (j = 16; j >= 0; j--)
        {
            //printf("%c - %c", A[i], B[j]);
            if (A[i] == '\0' || B[j] == '\0') L[i][j] = 0;
 
            else if (A[i] == B[j]) L[i][j] = 1 + L[i+1][j+1];
 
            else L[i][j] = max(L[i+1][j], L[i][j+1]);
 
        }
    }

    return L[0][0];
 
}
 
int max (int a, int b)
{
    return a > b ? a : b;
}
